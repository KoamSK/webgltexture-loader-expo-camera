{"version":3,"sources":["../src/ExpoCameraTextureLoader.js"],"names":["neverEnding","Promise","available","NativeModulesProxy","ExponentGLObjectManager","createCameraTextureAsync","warned","ExpoCameraTextureLoader","WebGLTextureLoaderAsyncHashCache","WeakMap","canLoad","input","Camera","console","log","disposeTexture","texture","exglObjId","objIds","get","destroyObjectAsync","delete","inputHash","camera","loadNoCache","gl","__exglCtxId","exglCtxId","disposed","dispose","glView","getExtension","promise","reject","Error","then","set","width","height","globalRegistry","add"],"mappings":";;;;;;;AACA;;AAIA;;AACA;;AACA;;;;AAEA,MAAMA,WAAW,GAAG,IAAIC,OAAJ,CAAY,MAAM,CAAE,CAApB,CAApB;AAEA,MAAMC,SAAS,GAAG,CAAC,EACjBC,yBAAmBC,uBAAnB,IACAD,yBAAmBC,uBAAnB,CAA2CC,wBAF1B,CAAnB;AAKA,IAAIC,MAAM,GAAG,KAAb;;AAEA,MAAMC,uBAAN,SAAsCC,oDAAtC,CAA+E;AAAA;AAAA;;AAAA,oCAGrC,IAAIC,OAAJ,EAHqC;AAAA;;AAK7EC,EAAAA,OAAO,CAACC,KAAD,EAAa;AAClB,QAAIA,KAAK,IAAIA,KAAK,YAAYC,kBAA9B,EAAsC;AACpC,UAAIV,SAAJ,EAAe,OAAO,IAAP;;AACf,UAAI,CAACI,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAG,IAAT;AACAO,QAAAA,OAAO,CAACC,GAAR,CACE,2IADF;AAGD;AACF;;AACD,WAAO,KAAP;AACD;;AAEDC,EAAAA,cAAc,CAACC,OAAD,EAAwB;AACpC,UAAMC,SAAS,GAAG,KAAKC,MAAL,CAAYC,GAAZ,CAAgBH,OAAhB,CAAlB;;AACA,QAAIC,SAAJ,EAAe;AACbd,+BAAmBC,uBAAnB,CAA2CgB,kBAA3C,CAA8DH,SAA9D;AACD;;AACD,SAAKC,MAAL,CAAYG,MAAZ,CAAmBL,OAAnB;AACD;;AAEDM,EAAAA,SAAS,CAACC,MAAD,EAAiB;AACxB,WAAO,iCAAeA,MAAf,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACD,MAAD,EAAiB;AAC1B,UAAM;AAAEE,MAAAA;AAAF,QAAS,IAAf,CAD0B,CAE1B;;AACA,UAAM;AAAEC,MAAAA,WAAW,EAAEC;AAAf,QAA6BF,EAAnC;AACA,QAAIG,QAAQ,GAAG,KAAf;;AACA,UAAMC,OAAO,GAAG,MAAM;AACpBD,MAAAA,QAAQ,GAAG,IAAX;AACD,KAFD;;AAGA,UAAME,MAAM,GAAGL,EAAE,CAACM,YAAH,CAAgB,WAAhB,CAAf;AACA,UAAMC,OAAmB,GAAG,CAACF,MAAD,GACxB7B,OAAO,CAACgC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CADwB,GAExBJ,MAAM,CAACzB,wBAAP,CAAgCkB,MAAhC,EAAwCY,IAAxC,CAA6CnB,OAAO,IAAI;AACtD,UAAIY,QAAJ,EAAc,OAAO5B,WAAP,CADwC,CAEtD;;AACA,WAAKkB,MAAL,CAAYkB,GAAZ,CAAgBpB,OAAhB,EAAyBA,OAAO,CAACC,SAAjC;AACA,YAAMoB,KAAK,GAAG,CAAd;AACA,YAAMC,MAAM,GAAG,CAAf,CALsD,CAMtD;;AACA,aAAO;AAAEtB,QAAAA,OAAF;AAAWqB,QAAAA,KAAX;AAAkBC,QAAAA;AAAlB,OAAP;AACD,KARD,CAFJ;AAWA,WAAO;AAAEN,MAAAA,OAAF;AAAWH,MAAAA;AAAX,KAAP;AACD;;AAnD4E;;gBAAzEtB,uB,cACc,CAAC,G;;AAqDrBgC,mCAAeC,GAAf,CAAmBjC,uBAAnB;;eAEeA,uB","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\nimport { findNodeHandle } from \"react-native\";\nimport { NativeModulesProxy } from \"@unimodules/core\";\nimport { Camera } from \"expo-camera\";\n\nconst neverEnding = new Promise(() => {});\n\nconst available = !!(\n  NativeModulesProxy.ExponentGLObjectManager &&\n  NativeModulesProxy.ExponentGLObjectManager.createCameraTextureAsync\n);\n\nlet warned = false;\n\nclass ExpoCameraTextureLoader extends WebGLTextureLoaderAsyncHashCache<Camera> {\n  static priority = -199;\n\n  objIds: WeakMap<WebGLTexture, number> = new WeakMap();\n\n  canLoad(input: any) {\n    if (input && input instanceof Camera) {\n      if (available) return true;\n      if (!warned) {\n        warned = true;\n        console.log(\n          \"webgltexture-loader-expo: ExponentGLObjectManager.createCameraTextureAsync is not available. Make sure to use the correct version of Expo\"\n        );\n      }\n    }\n    return false;\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    const exglObjId = this.objIds.get(texture);\n    if (exglObjId) {\n      NativeModulesProxy.ExponentGLObjectManager.destroyObjectAsync(exglObjId);\n    }\n    this.objIds.delete(texture);\n  }\n\n  inputHash(camera: Camera) {\n    return findNodeHandle(camera);\n  }\n\n  loadNoCache(camera: Camera) {\n    const { gl } = this;\n    // $FlowFixMe\n    const { __exglCtxId: exglCtxId } = gl;\n    let disposed = false;\n    const dispose = () => {\n      disposed = true;\n    };\n    const glView = gl.getExtension(\"GLViewRef\");\n    const promise: Promise<*> = !glView\n      ? Promise.reject(new Error(\"GLViewRef not available\"))\n      : glView.createCameraTextureAsync(camera).then(texture => {\n          if (disposed) return neverEnding;\n          // $FlowFixMe\n          this.objIds.set(texture, texture.exglObjId);\n          const width = 0;\n          const height = 0;\n          // ^ any way to retrieve these ?\n          return { texture, width, height };\n        });\n    return { promise, dispose };\n  }\n}\n\nglobalRegistry.add(ExpoCameraTextureLoader);\n\nexport default ExpoCameraTextureLoader;\n"],"file":"ExpoCameraTextureLoader.js"}